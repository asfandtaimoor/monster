{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAIaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,sCAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,oBAChF,6BAAML,EAAMG,QAAQG,OACpB,4BAAIN,EAAMG,QAAQI,aCHbC,EAAW,SAAAR,GACpB,OAAO,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAI,SAACP,GAAD,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJzBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACrB,uBACAZ,UAAU,SACTa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCAG,E,kDAzCb,aAAc,IAAD,8BACX,gBAkBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlBtC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAY,IAJH,E,gEAYQ,IAAD,OACjBI,MAAM,6CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAWkB,S,+BAOpC,IAAD,EAC2BC,KAAKN,MAAhCb,EADA,EACAA,SAAWU,EADX,EACWA,YACZU,EAAkBpB,EAASqB,QAAQ,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,OAAd,6BACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GApCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.869691f4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport './card.styles.css.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container card-container:hover\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"Monster Picture\"/>\r\n        <h1>{ props.monster.name }</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n\r\nCard.propTypes = {\r\n    monster: PropTypes.any\r\n  };","import React, { Component } from 'react';\r\nimport './card-list.style.css';\r\nimport PropTypes from 'prop-types';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    return <div className=\"card-list\">\r\n                {props.monsters.map((monster) =>\r\n                   <Card key={monster.id} monster={monster} />\r\n                )}\r\n            </div>\r\n}\r\n\r\n\r\nCardList.propTypes = {\r\n    monsters: PropTypes.any\r\n  };","import React from 'react';\r\nimport './search-box.style.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const SearchBox = ({ placeholder , handleChange }) => (\r\n    <input \r\n    className=\"search\"\r\n     type=\"search\" \r\n     placeholder={placeholder} \r\n     onChange={handleChange}\r\n    />\r\n)\r\n\r\n\r\nSearchBox.propTypes = {\r\n    placeholder: PropTypes.string,\r\n    handleChange: PropTypes.any\r\n  };","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = { \n      monsters : [],\n      searchField:'',\n    }\n\n    \n  }\n\n\n  //  Get data from api\n   componentDidMount(){\n     fetch('http://jsonplaceholder.typicode.com/users')\n     .then( response => response.json())\n     .then( users => this.setState({ monsters : users}))\n   }\n\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  }\n  render() { \n    const {monsters , searchField } = this.state;\n    const filteredMonster = monsters.filter( monster => (\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ))\n    \n    return ( \n      <div className=\"App\">\n        <h1 className=\"head\">Monster Rolodox</h1>\n        <SearchBox \n          placeholder=\"Search Monster\" \n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonster} ></CardList>\n      </div>\n     );\n  }\n}\n \nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}